name: Continuous Integratio

on:
  # Build every pull request, to check for regressions.
  pull_request:

  # Build when a PR is merged, to update the README's CI badge.
  push:
#    branches: [main]

  # Build once a month, to detect missing upper bounds.
  schedule:
    - cron: '0 0 1 * *'

env:
      STAN_USE_DEFAULT_CONFIG: True

defaults:
  run:
    shell: bash

jobs:

# For some reason, this works locally but doesn't work on the GitHub Actions CI.
# We have left this here for reference, perhaps ths disparity can be corrrected.
#
#  # Check that the project does not have detectable dead code
#  weeder:
#    name: Dead Code Check
#    runs-on: ubuntu-latest
#
#    steps:
#      - uses: actions/checkout@v2.3.4
#      - uses: haskell/actions/setup@v1.1.5
#        name: Setup Haskell
#        with:
#          cabal-version: latest
#          ghc-version:   8.10.4
#
#      - run: make dead-code-check-setup
#      
#      - uses: actions/cache@v2
#        name: caching dead code check
#        with:
#          path: |
#            ~/.cabal/store
#            dist-newstyle
#          key: ${{ runner.os }}-dead-code-${{ hashFiles('cabal.project.freeze') }}
#
#      - run: make dead-code-check-deploy


  # Check that the project has complete documetation coverage
  haddock:
    name: Documentation Check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2.3.4
      - uses: haskell/actions/setup@v1.1.5
        name: Setup Haskell
        with:
          cabal-version: latest
          ghc-version:   latest
                  
      - run: make documentation-check-setup

      - uses: actions/cache@v2
        name: caching documetation check
        with:
          path: |
            ~/.cabal/store
            dist-newstyle
          key: ${{ runner.os }}-documetation-${{ hashFiles('cabal.project.freeze') }}

      - run: make documentation-check-deploy


  # Run Stylish Haskell to check for errant code formatting
  formatter:
    name: Formatting Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2.3.4
    - uses: haskell/actions/setup@v1.1.5
    - run: make formatting-check


  # Run HLint to check for code improvements
  hlint:
    name: HLint Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2.3.4
    - uses: haskell/actions/setup@v1.1.5
    - run: make hlint-check


  # Check that the project builds with the specified lower bounds.
  lower-bounds:
    name: Lower Bounds Check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2.3.4
      - uses: haskell/actions/setup@v1.1.5
        name: Setup Haskell
        with:
          cabal-version: latest
          ghc-version:   8.8.4

      - run: make lower-bounds-check-setup

      - uses: actions/cache@v2
        name: caching lower bounds check
        with:
          path: |
            ~/.cabal/store
            dist-newstyle
          key: ${{ runner.os }}-lower-bounds-${{ hashFiles('cabal.project.freeze') }}

      - run: make lower-bounds-check-deploy


  # Run Stylish Haskell to check for errant code formatting
  misspellings:
    name: Spelling Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2.3.4
    - uses: haskell/actions/setup@v1.1.5
    - run: make spelling-check


  # Check that the project has no anti-patterns
  stan:
    name: Static Analysis Check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2.3.4
      - uses: haskell/actions/setup@v1.1.5
        name: Setup Haskell
        with:
          cabal-version: latest
          ghc-version:   8.10.4
                  
      - run: make static-analysis-check-setup

      - uses: actions/cache@v2
        name: caching static analysis check
        with:
          path: |
            ~/.cabal/store
            dist-newstyle
          key: ${{ runner.os }}-static-analysis-${{ hashFiles('cabal.project.freeze') }}

      - run: make static-analysis-check-deploy


  # Check that the project builds with the specified lower bounds.
  file-tests:
    name: File Parser Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2.3.4
      - uses: haskell/actions/setup@v1.1.5
        name: Setup Haskell
        with:
          cabal-version: latest
          ghc-version:   latest

      - run: make file-tests-setup

      - uses: actions/cache@v2
        name: caching file tests
        with:
          path: |
            ~/.cabal/store
            dist-newstyle
          key: ${{ runner.os }}-file-parser-tests-${{ hashFiles('cabal.project.freeze') }}

      - run: make file-tests-verification


  # Check that the project builds with the specified lower bounds.
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2.3.4
      - uses: haskell/actions/setup@v1.1.5
        name: Setup Haskell
        with:
          cabal-version: latest
          ghc-version:   8.10.4

      - run: cabal update
      - run: cabal clean
      - run: cabal configure --enable-tests --with-compiler=ghc
      - run: cabal freeze    --enable-tests
      - uses: actions/cache@v2
        name: caching integration tests
        with:
          path: |
            ~/.cabal/store
            dist-newstyle
          key: ${{ runner.os }}-integration-tests-${{ hashFiles('cabal.project.freeze') }}

      - run: cabal clean
      - run: cabal install exe:pcg --overwrite-policy=always --installdir=./bin
      - run: cabal run integration-tests


  # Check that the project builds with the specified lower bounds.
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2.3.4
      - uses: haskell/actions/setup@v1.1.5
        name: Setup Haskell
        with:
          cabal-version: latest
          ghc-version:   latest

      - run: make unit-tests-setup

      - uses: actions/cache@v2
        name: caching unit tests
        with:
          path: |
            ~/.cabal/store
            dist-newstyle
          key: ${{ runner.os }}-unit-tests-${{ hashFiles('cabal.project.freeze') }}

      - run: make unit-tests-verification


  # Cabal build matrix
  cabal-build-matrix:
    name: GHC-${{ matrix.ghc }} Cabal-${{matrix.cabal}} ${{matrix.os}}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        ghc:   [ '8.8.4', '8.10.4', '9.0.1' ]
        cabal: [ '3.2', '3.4' ]
        os:    [ ubuntu-latest ] # , macOS-latest ]
        include:
          - ghc:   latest
            cabal: latest
            os:    ubuntu-latest
            experimental: true

    steps:
      - uses: actions/checkout@v2.3.4
      - name: Setup Haskell
        uses: haskell/actions/setup@v1.1.5
        with:
          ghc-version:   ${{ matrix.ghc   }}
          cabal-version: ${{ matrix.cabal }}

      - run: gcc    --version
      - run: g++    --version
      - run: ghc    --version

      - run: make compilation-check-setup

      - uses: actions/cache@v2
        name: windows caching
        with:
          path: |
            c:\sr
            dist-newstyle
          key: ${{ runner.os }}-${{ matrix.ghc }}-${{ hashFiles('cabal.project.freeze') }}
          # restore keys is a fall back when the freeze plan is different
          restore-keys: |
            ${{ runner.os }}-${{ matrix.ghc }}-
        if:  matrix.os == 'windows-latest'
      - uses: actions/cache@v2
        name: ubuntu-linux and osx caching
        with:
          path: |
            ~/.cabal/store
            dist-newstyle
          key: ${{ runner.os }}-${{ matrix.ghc }}-${{ hashFiles('cabal.project.freeze') }}
          # restore keys is a fall back when the freeze plan is different
          restore-keys: |
            ${{ runner.os }}-${{ matrix.ghc }}-
        if:  matrix.os != 'windows-latest'

      - run: make compilation-check-deploy
