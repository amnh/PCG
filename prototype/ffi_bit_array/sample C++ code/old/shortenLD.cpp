/* inputs ld.txt file and outputs three files:   1. shorterLD.txt, which replaces the grammar and sentence columns with integer IDs   2. grammarID.txt, which gives a lookup table for grammar and IDs   3. sentID.txt, which does the same for sentences*/#include <string>#include <fstream>#include <iostream>#include <vector>#include <map>using namespace std;// ddeletes trailing spaces on sentences from LDvoid deleteTrailSpaces(string& sentence){	int length = sentence.length();	while( sentence[length - 1] == ' ')	{		sentence.erase(length - 1, 1);		length--;	}}void findIDs( ifstream& ifData, ofstream& gramOut, ofstream& sentOut, ofstream& LDOut, 				map<string, int>& sIndex, map<string, int>& gIndex ){	string sentence, gramID, garbage;		int sCurIndex = 0;	// keep track of current # of sentences	int gCurIndex = 0;	// same, but for grammars	bool gExists = false;  // this is for use in our nested if flowchart, below.						   // it lets us know if a given sentence is new to a grammar or not	bool sExists = false;	// as above, but for sentences				// load data from LD, one sentence at a time	while (!ifData.eof() )	{		getline( ifData, garbage, '\t' );		getline( ifData, gramID, '\t' );		getline( ifData, sentence, '\t' );		getline( ifData, garbage, '\n' );		//cout << gramID << "\t" << sentence << endl;				deleteTrailSpaces(sentence);					// first see if grammar exists		if (gIndex.find(gramID) == gIndex.end() )			// if the grammar has not yet been encountered, first update 		{			gIndex[gramID] = gCurIndex;			gramOut << gramID << "\t" << gCurIndex << "\n";			gCurIndex++;		}						// check to see if sentence has previously been encountered		if( sIndex.find(sentence) == sIndex.end() )		{			sIndex[sentence] = sCurIndex;			sentOut << sentence << "\t" << sCurIndex << "\n";			sCurIndex++;		} 				LDOut << gIndex[gramID] << "\t" << sIndex[sentence] << "\n";				sExists = false;		gExists = false;				}}int main(){	// /Volumes/Backup/eric/school/Linguistics/LD with William/	// /Users/eric/Documents/Backup/school/LD with William/	// /home/eric/LD_data/	string filepath = "/Volumes/Backup/eric/school/Linguistics/LD with William/";			ifstream ifData( (filepath + "ld.txt").c_str() );	ofstream gramOut( (filepath + "GrammarIDs.txt").c_str() );	ofstream sentOut( (filepath + "SentIDs.txt").c_str() );	ofstream LDOut( (filepath + "shorterLD.txt").c_str() );		map<string, int> sIndex; 	// to give each sentence a unique ID, for vector lookup	map<string, int> gIndex; 	// same as above, but for grammars			findIDs( ifData, gramOut, sentOut, LDOut, sIndex, gIndex );		}