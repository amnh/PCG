// using Jaccard measures, find subsets of grammars// input file is of form b1 i1 s1 b2 i2 s2 j// where b is a binary number, name of a grammar// i is an integer, decimal equivalent of above// s is an integer, size of grammar set// j is jaccard measure of two grammars#include <string>#include <fstream>#include <iostream>using namespace std;double sixSigDig (double num){	double total = 1.0;	double result = num*1000000;	// so we have 6 digits left of .	while (result < 100000)		// to get 6 significant digits	{		result * 10;		total * 10;					// we'll divide by this later	}	result = floor(result + .5);	// rounds up		return double(int(result)) / (1000000 * total);			// first, deletes last digit, then divides whole thing by 		// number of digits necessary to get six significant}int main(){	string filePath = "/Volumes/Backup/eric/school/Linguistics/LD with William/";	ifstream ifData( (filePath + "jaccard_alpha.txt").c_str() );	ofstream output( (filePath + "subsets.txt").c_str() );		string G1, G2;	double size1, size2, jacc;	int G1dec, G2dec;		while ( !ifData.eof() )	{		ifData >> G1;		ifData >> G1dec;		ifData >> size1;		ifData >> G2;		ifData >> G2dec;		ifData >> size2;		ifData >> jacc;		        	    if (jacc == 1) {		//  print "$G1 $G2 equivalent\n";    	    }	    else if (jacc == 0){		// print "$G1 $G2 disjoint\n";	    }	    else if ( abs(jacc - sixSigDig(size1/size2) ) < .000002 )	    {	      	output << G1dec << "\t" << G2dec << endl;	    } 	    else if ( abs(jacc - sixSigDig(size2/size1) ) < .000002 )	    {			output << G2dec << "\t" << G1dec << endl;	    }	    else	    {		// print "$G1 $G2 properly intersect\n";	    }	}}