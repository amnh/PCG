cabal-version:      3.0
Category:           Biology
build-type:         Simple
name:               phylogenetic-component-graph
version:            0.3.0

author:             Ward Wheeler
maintainer:         wheeler@amnh.org
license:            BSD-3-Clause
license-file:       LICENSE

synopsis:           Program and library for general phylogenetic graph search

description:        Phylogenetic Componet Graph provides a library for
                    interacting with phylogenetic graphs. It defines a
                    decalartive scripting language for defining phylogenetic
                    searches. Said scripts can be evaluated by the provided pcg
                    program to perform a phylogenetic search on an input dataset.

tested-with:
    GHC == 8.8.4
    GHC == 8.10.3

extra-source-files:
    AUTHORS.md
    CHANGELOG.md
    FUNDING.md
    README.md
    -- Specify the header files as required source files here.
    -- Do not specify them in the c-sources or cxx-sources stanzas.
    -- This is required for sdist and install commands to work correctly.
    lib/core/ffi/external-direct-optimization/alignCharacters.h
    lib/core/ffi/external-direct-optimization/alignmentMatrices.h
    lib/core/ffi/external-direct-optimization/c_alignment_interface.h
    lib/core/ffi/external-direct-optimization/c_code_alloc_setup.h
    lib/core/ffi/external-direct-optimization/costMatrix.h
    lib/core/ffi/external-direct-optimization/debug_constants.h
    lib/core/ffi/external-direct-optimization/dyn_character.h
    lib/core/ffi/external-direct-optimization/ukkCheckPoint.h
    lib/core/ffi/external-direct-optimization/ukkCommon.h
    lib/tcm-memo/ffi/memoized-tcm/costMatrix_2d.hpp
    lib/tcm-memo/ffi/memoized-tcm/costMatrix_3d.hpp
    lib/tcm-memo/ffi/memoized-tcm/costMatrixWrapper_2d.h
    lib/tcm-memo/ffi/memoized-tcm/costMatrixWrapper_3d.h
    lib/tcm-memo/ffi/memoized-tcm/costMatrixWrapper.h
    lib/tcm-memo/ffi/memoized-tcm/dynamicCharacterOperations.h


-- Group of buildinfo specifications to correctly build and link to the C & C++:
-- FFI code.
common ffi-buildinfo

  cc-options:
    --std=c11

  hs-source-dirs:
    lib/core/ffi

  c-sources:
    lib/core/ffi/external-direct-optimization/alignCharacters.c
    lib/core/ffi/external-direct-optimization/alignmentMatrices.c
    lib/core/ffi/external-direct-optimization/c_alignment_interface.c
    lib/core/ffi/external-direct-optimization/c_code_alloc_setup.c
    lib/core/ffi/external-direct-optimization/costMatrix.c
    lib/core/ffi/external-direct-optimization/dyn_character.c
    lib/core/ffi/external-direct-optimization/ukkCheckPoint.c
    lib/core/ffi/external-direct-optimization/ukkCommon.c

  -- Here we list all directories that contain C & C++ header files that the FFI
  -- tools will need to locate when preprocessing the C files. Without listing
  -- the directories containing the C header files here, the FFI preprocessor
  -- (hsc2hs, c2hs, etc.) will fail to locate the requisite files. Note also,
  -- that the parent directory of the nessicary C & C++ header files must be
  -- specified. The preprocessor will not recursively look in subdirectories for
  -- header files!
  include-dirs:
    lib/core/ffi/external-direct-optimization


-- A litany of GHC warnings designed to alert us during the build of any common
-- pitfalls, future compatibility issues, or coding conventions.
common ghc-flags

  ghc-options:
--    -debug
--    -rtsopts          
--    -g                    
    -- Optimization flags
    -O2
    -fexcess-precision
    -fexpose-all-unfoldings
    -flate-specialise
    -foptimal-applicative-do
    -fspecialize-aggressively
    -fstatic-argument-transformation
    -- Usability flags
    -fdiagnostics-color=always
    -fhide-source-paths
    -j
    -- Sanity check warnings
    -Wall
    -Wcompat
    -Wdodgy-foreign-imports
    -Wduplicate-exports
    -Wempty-enumerations
    -Widentities
    -Wincomplete-patterns
    -Wincomplete-record-updates
    -Wincomplete-uni-patterns
    -Wmissed-specialisations          
    -Wmissing-deriving-strategies          
    -Wmissing-fields
    -Wmissing-home-modules
    -Wmissing-monadfail-instances
    -Wmissing-signatures
    -Wnoncanonical-monad-instances
    -Wnoncanonical-monoid-instances
    -Woverflowed-literals
    -Woverlapping-patterns
    -Wredundant-constraints
    -Wsemigroup
    -Wtabs
    -Wunrecognised-warning-flags
    -Wunused-binds
    -Wunused-do-bind
    -Wunused-foralls
    -Wunused-imports
    -Wunused-matches
    -Wwrong-do-bind

  if impl(ghc >= 8.10)
    ghc-options:
      -Wderiving-defaults
      -Wunused-packages


-- Global deviations from Haskell98
common language-specs

  -- Always use MonadFail(fail), not Monad(fail)
  other-extensions:
    MonadFailDesugaring
    DerivingStrategies


library exportable

  import:
    ghc-flags,
    language-specs,

  visibility:
    private

  default-language:
    Haskell2010

  hs-source-dirs:
    lib/exportable/src

  build-depends:
    base                     >= 4.11      && < 5.0,
    lens                     >= 4.18      && < 5.0,
    mono-traversable         >= 1.0       && < 2.0,

  exposed-modules:
    Bio.Character.Exportable

  other-modules:
    Bio.Character.Exportable.Class


-- A library for defining custom serialisation and rendering functionality.

-- Defines custom helper functions for serializing to data formats and related
-- to text representations.

library serialize

  import:
    ghc-flags,
    language-specs

  visibility:
    private

  default-language:
    Haskell2010

  hs-source-dirs:
    lib/serialize/src

  build-depends:
    base                     >= 4.11      && < 5.0,
    keys                     >= 3.12      && < 4.0,
    text                     >= 1.2.4     && < 2.0,
    text-show                >= 3.8.1     && < 4.0,
    xml                      >= 1.3.14    && < 1.4,

  exposed-modules:
    TextShow.Custom
    Text.Newick.Class
    Text.XML
    Text.XML.Class
    Text.XML.Custom


-- Library for working with TCMs and SCMs in various representations.

-- General purpose library for working with transition cost matrices (TCMs)
-- and symbol change matrices (SCMs). Specialization options are provided
-- for the discrete metric (non-additive) and the L1 norm (additive) TCMs &
-- SCMs. Exposes a memoized binding for sparsely indexed, large TCMs.

library tcm

  import:
    ffi-buildinfo,
    ghc-flags,
    language-specs,

  visibility:
    private

  default-language:
    Haskell2010

  hs-source-dirs:
    lib/core/tcm/src

  build-depends:
    exportable,
    serialize,
    tcm-memo,
    utility,
    binary                   >= 0.8       && < 1.0,
    base                     >= 4.11      && < 5.0,
    containers               >= 0.6.2     && < 1.0,
    deepseq                  >= 1.4       && < 2.0,
    QuickCheck               >= 2.14      && < 3.0,
    mono-traversable         >= 1.0       && < 2.0,
    vector                   >= 0.12.0.3  && < 0.13,
    vector-binary-instances  >= 0.2.5     && < 1.0,

  exposed-modules:
    Data.MetricRepresentation
    Data.TCM
    Data.TCM.Dense

  other-modules:
    Data.TCM.Internal
    Data.TCM.Dense.FFI


-- A binding to a C++ hashtable for thread-safe memoization.

-- This package is designed to provide a thread safe binding to a "pure"
-- memoization of two-way and three-way Sankoff character cost and median
-- computations.

library tcm-memo

  import:
    ffi-buildinfo,
    ghc-flags,
    language-specs,

  visibility:
    private

  default-language:
    Haskell2010

  hs-source-dirs:
    lib/tcm-memo/src

  cc-options:       --std=c11

  cxx-options:      --std=c++14

  -- This library is required for linking to the C++ standard template library.
  extra-libraries:  stdc++

  hs-source-dirs:   lib/tcm-memo/ffi

  c-sources:
    lib/tcm-memo/ffi/memoized-tcm/costMatrixWrapper.c
    lib/tcm-memo/ffi/memoized-tcm/dynamicCharacterOperations.c

  cxx-sources:
    lib/tcm-memo/ffi/memoized-tcm/costMatrix_2d.cpp
    lib/tcm-memo/ffi/memoized-tcm/costMatrix_3d.cpp

  -- Here we list all directories that contain C & C++ header files that the FFI
  -- tools will need to locate when preprocessing the C files. Without listing
  -- the directories containing the C header files here, the FFI preprocessor
  -- (hsc2hs, c2hs, etc.) will fail to locate the requisite files. Note also,
  -- that the parent directory of the nessicary C & C++ header files must be
  -- specified. The preprocessor will not recursively look in subdirectories for
  -- header files!
  include-dirs:
    lib/tcm-memo/ffi/memoized-tcm

  build-depends:
    exportable,
    base                     >= 4.11      && < 5.0,
    deepseq                  >= 1.4       && < 2.0,
    QuickCheck               >= 2.14      && < 3.0,

  exposed-modules:
    Data.TCM.Memoized
    Data.TCM.Memoized.Types

  other-modules:
    Data.TCM.Memoized.FFI


-- Collection of utility functions and data structures

-- Defines custom data structures for special use cases, more abstract functions
-- that base provides, and re-exported correcting to deficient libraries.

library utility

  import:
    ghc-flags,
    language-specs

  visibility:
    private

  default-language:
    Haskell2010

  hs-source-dirs:
    lib/utility/src

  build-depends:
    base                     >= 4.11      && < 5.0,
    binary                   >= 0.8       && < 1.0,
    bv-little                >= 1.0.1     && < 2.0,
    bv-little:instances      >= 1.0.1     && < 2.0,
    bytestring               >= 0.10.10   && < 0.11,
    containers               >= 0.6.2     && < 1.0,
    deepseq                  >= 1.4       && < 2.0,
    foldl                    >= 1.4       && < 2.0,
    hashable                 >= 1.3       && < 2.0,
    integer-gmp              >= 1.0       && < 2.0,
    keys                     >= 3.12      && < 4.0,
    lens                     >= 4.18      && < 5.0,
    matrix                   >= 0.3.6     && < 0.4,
    mono-traversable         >= 1.0       && < 2.0,
    parallel                 >= 3.2       && < 4.0,
    pointed                  >= 5.0       && < 6.0,
    QuickCheck               >= 2.14      && < 3.0,
    semigroupoids            >= 5.3       && < 5.4,
    tasty-hunit              >= 0.10      && < 1.0,
    text                     >= 1.2.4     && < 2.0,
    text-short               >= 0.1.3     && < 1.0,
    text-show                >= 3.8.1     && < 4.0,
    text-show-instances      >= 3.8       && < 4.0,
    vector                   >= 0.12.0.3  && < 0.13,
    vector-binary-instances  >= 0.2       && < 1.0,
    vector-instances         >= 3.4       && < 3.5,

  exposed-modules:
    Control.Parallel.Custom
    Data.BitMatrix
    Data.Either.Custom
    Data.Foldable.Custom
    Data.List.Utility
    Data.Matrix.NotStupid
    Data.MutualExclusionSet
    Data.Pair.Strict
    Data.Range
    Data.ShortText.Custom
    Data.TextShow.Custom
    Data.UnionSet
    Data.Vector.Custom
    Data.Vector.Memo
    Data.Vector.NonEmpty
    Numeric.Cost
    Numeric.Extended
    Numeric.Extended.Natural
    Numeric.Extended.Real
    Numeric.NonNegativeAverage
    Test.HUnit.Custom
    Test.QuickCheck.Arbitrary.Instances

  other-modules:
    Data.BitMatrix.Internal
    Data.MutualExclusionSet.Internal
    Numeric.Extended.Internal
